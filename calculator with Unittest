
# -*- coding: utf-8 -*-

"""

Let’s change the calculator’s division operation for a practical use of assertRaises.
Whenever div is called with divisor equals 0 an error raises. Check by running the following test case:

class TestCalculator(unittest.TestCase):

    def test_div(self):
        '''Make sure ZeroDivisionError is raised when necessary'''
        self.calc = Calculator()
        self.assertRaises(ZeroDivisionError, self.calc.div, 10, 0)

unittest.main(argv=[''], verbosity=2, exit=False)

in this case the assertEqual function. Note that, flagging the method test_mul with @unittest.skip('your_reason') will skip the test for that method.
"""


class Calculator:
    def __init__(self):
        pass

    def add(self, a, b):
        return a + b

    def sub(self, a, b):
        return a - b
  
    def mul(self, a, b):
        return a * b

    def div(self, a, b):
         if b == 0:
             raise ZeroDivisionError("The divisor must not be zero")
         return a / b

import unittest
        
class TestCalculator(unittest.TestCase):
    
    def test_add(self):
        '''Test case function for addition'''
        self.calc = Calculator()
        result = self.calc.add(4, 7)
        expected = 11
        self.assertEqual(result, expected)

    def test_sub(self):
        '''Test case function for subtraction'''
        self.calc = Calculator()
        result = self.calc.sub(10, 5)
        expected = 5
        self.assertEqual(result, expected)

    @unittest.skip('Some reason')
    def test_mul(self):
        '''Test case function for multiplication'''
        self.calc = Calculator()
        result = self.calc.mul(3, 7)
        expected = 21
        self.assertEqual(result, expected)

    def test_div(self):
        self.calc = Calculator()
        self.assertRaises(ZeroDivisionError, self.calc.div, 10, 0)

unittest.main(argv=[''], verbosity=2, exit=False)


########################################### OUTPUT #################################################

unittest.main(argv=[''], verbosity=2, exit=False)
..s.
----------------------------------------------------------------------
Ran 4 tests in 0.003s

OK (skipped=1)
        
